#include<stdio.h>
#include<algorithm>
using namespace std;


/*A[]从高到底排序，返回x在A中的下标，没有返回-1*/
int binarySearch(int A[], int left, int right, int x) {
	int mid;
	while (left <= right) {
		mid = (right + left) / 2;
		if (A[mid] == x)
			return mid;
		else if (A[mid] > x)
			right = mid - 1;
		else
			left = mid + 1;
	}
	return -1;
}


/*返回第一个大于等于x的元素下标,如果不存在则返回-1*/
int lower_bound(int A[], int left, int right, int x) {
	int mid;
	while (left < right) {
		mid = (left + right) / 2;
		if (A[mid] >= x)
			right = mid;
		else
			left = mid + 1;
	}
	if (A[left] >= x)
		return left;
	else
		return -1;
}

/*返回第一个大于x的元素位置,如果没有返回-1*/
int upper_bound(int A[], int left, int right, int x) {
	int mid;
	while (left < right) {
		mid = (left + right) / 2;
		if (A[mid]>x)
			right = mid;
		else
			left = mid + 1;
	}
	if (A[left] > x)
		return left;
	else
		return -1;

}
int main()
{
	

	int A[10] = { 1,2,3,4,4,4,5,5,5,6 };
	int res1=binarySearch(A, 0, 9, 4);
	
	int res2 = lower_bound(A, 0, 9, 4);
	int res3 = upper_bound(A, 0, 9, 4);
	//printf_s("%d", res2);
	printf_s("%d %d %d", res1, res2, res3);

	
	system("pause");
	return 0;
 }
